% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sgpvAM.R
\name{sgpvAM}
\alias{sgpvAM}
\title{Adaptive Monitoring with Second Generation p-Value}
\usage{
sgpvAM(mcmcData = NULL, nreps, waitWidths, dataGeneration = NULL,
  dataGenArgs, effectGeneration = NULL, effectGenArgs, modelFit,
  pointNull, deltaL2, deltaL1, deltaG1, deltaG2, lookSteps = 1,
  kSteps = 10, maxAlertSteps = 100, maxN = NULL, lagOutcomeN = 0,
  monitoringIntervalLevel = 0.05, printProgress = TRUE,
  outData = TRUE, getECDF = TRUE, cores = NULL, fork = TRUE,
  socket = TRUE)
}
\arguments{
\item{mcmcData}{Previously generated data}

\item{nreps}{Number of mcmc replicates to generate}

\item{waitWidths}{Width of Confidence Intervals, matching the standard deviation scale provided in dataGeneration}

\item{dataGeneration}{Function (such as rnorm) to generate outcomes}

\item{dataGenArgs}{Arguments for dataGeneration function.  This includes, in the least, 'n' observations to generate.}

\item{effectGeneration}{Function (such as rnorm) or fixed value to generate intervention effect (theta)}

\item{effectGenArgs}{Arguments for effectGeneration function (if any)}

\item{modelFit}{Function written to obtain intervals.  Two are provided: 1) lmCI which obtains a confidence interval from a linear model and has class 'normal' indicating normal data and 2) lrCI obtains Wald Confidence Interval from logistic regression model and has class 'binomial' indicating binomial data.}

\item{pointNull}{Point null}

\item{deltaL2}{Clinical guidepost less than and furthest from point null}

\item{deltaL1}{Clinical guidepost less than and closest to point null}

\item{deltaG1}{Clinical guidepost greater than and closest to point null}

\item{deltaG2}{Clinical guidepost greater than and furthest from point null}

\item{lookSteps}{The frequency data are observed (defaults to fully sequential)}

\item{kSteps}{How refined to consider the number of affirmation steps.  kSteps = k to maxAlertSteps considers all possible affirmation steps from 0 to maxAlertSteps by k.}

\item{maxAlertSteps}{Maximum number of steps before affirming an alert}

\item{maxN}{Maximum number of observations}

\item{lagOutcomeN}{Number of units collected while awaiting an outcome}

\item{monitoringIntervalLevel}{Traditional (1-alpha) used in monitoring intervals}

\item{outData}{T/F for returning the mcmcMonitoringData at end of call}
}
\value{
(1) mcmcMonitoring: the monitored generated / pre-generated datasets, (2) mcmcEndOfStudy: For each waitWidth and alertK, the average sample size, bias, mse, and errors plus the ecdf of sample size and bias, and (3) the function inputs
}
\description{
The Second Generation p-Value (SGPV) incorporates pre-specified clinical context
to monitor studies until either ruling out trivial or impactful effects.  Operating
characteristics may be determined via.  This function allows the user to use either
their own generated data or to generate their own data from any of R's random data
generators.
}
\details{
Data are either provided from one's own simulations or via monte-carlo simulations of data, using \code{dataGeneration},
\code{dataGenArgs}, \code{effectGeneration}, and \code{effectGenArgs}.  When one's own data are provided, it must be in matrix
format with at least the columns: 'theta', 'est', 'lo' (lower bound), and 'up' (upper bound).  Otherwise, data are generated
until the final \code{maxAlertSteps} observations affirm a stopping rule under unrestricted sample size.  Without \code{dataGeneration},
\code{dataGenArgs}, \code{effectGeneration}, and \code{effectGenArgs} no further data may be generated.  If pre-generated data
are insufficient for unrestricted monitoring, the user is notified to generate more data.

Under working knowledge of the data / clinical context, indicate the point null and clinical guideposts (2 guideposts for one-sided
investigations and 4 guideposts for two-sided investigations).  For a one-sided investigation, leave both of the lower (or upper)
deltas (ie \code{deltaL2} \code{deltaL1} or \code{deltaG1} \code{deltaG2}) set to NA.

To reduce false discoveries, the study waits until the interval of interest (currently coded as the Confidence Interval)
achieves an expected maximum width.  The expected width assumes the standard deviation provided in \code{dataGenArgs}.
Assuming larger variability than the truth yields a longer wait time and more conservative error.

Acruing data are monitored by intervals as specified with \code{modelFit} which may be user defined.

Monitoring rules: An alert is raised when the effect, theta, is ruled to be not trivial or not meaningful (using sgpv).
To reduce bias, increase coverage, and improve operating characteristics in general, the study may require the same alert
be raised k observations later.  To investigate the ideal choice of k, user may specify \code{lookSteps} up until
\code{maxAlertSteps}.

While data are simulated to allow unrestricted sample size, practically the study may feasibly allow up to \code{maxN} units
to accrue.  Further, outcomes are simulated to occur simultaneously.  However, there may be a lag time in Outcomes.
\code{lagOutcomeN} indicates the number of units that are yet being followed.  A study may stop with unrestricted sample size
yet may still have a lag on observing additionally accrued units.

Note: User may choose to save the generated or pre-specified data.  This can be substantive in size.  However, when
generating data from a location-shift family, it may be used to fully explore a range of shifted intervention effects (theta).
}
\examples{
devtools::install_github("chipmanj/sgpvAM")
library(sgpvAM)
# Simulate AM trial
# Two-sided deltas
# defaults to sd = 1
am <-  sgpvAM(nreps            = 100,
              maxAlertSteps    = 100,       lookSteps = 1, waitWidths = seq(0.15, 0.6, by = 0.05),
              dataGeneration   = rnorm,   dataGenArgs = list(n=800),
              effectGeneration = 0,
              modelFit         = lmCI,
              pointNull = 0, deltaL2 = -0.5, deltaL1=-0.2, deltaG1=0.2, deltaG2=0.5,
              monitoringIntervalLevel = 0.05,
              maxN = 200, lagOutcomeN = 50)
amShifted <- locationShift(am, shiftedThetas = seq(-1,0,by=0.1))
# Unrestricted Sample Size
# Explore wait width (first with alert k specified at 50)
plot(amShifted, "n",                 alertK = 50,      xlim=c(-1,0),   ylim=c(0,801),    maxVary = 10)
plot(amShifted, "rejPN",             alertK = 50,      xlim=c(-1,0),   ylim=c(0,1),      maxVary = 10)
plot(amShifted, "rejPN",             alertK = 50,      xlim=c(-1,0),   ylim=c(0,1),      maxVary = 5)
plot(amShifted, "bias",              alertK = 50,      xlim=c(-1,0),   ylim=c(-0.1,0.1), maxVary = 5)
plot(amShifted, "mse",               alertK = 50,      xlim=c(-1,0),   ylim=c(0,0.1),    maxVary = 5)
plot(amShifted, "cover",             alertK = 50,      xlim=c(-1,0),   ylim=c(0.75,1),   maxVary = 5)
plot(amShifted, "stopInconclusive",  alertK = 50,      xlim=c(-1,0),   ylim=c(0,1),      maxVary = 5)
plot(amShifted, "stopNotImpactful",  alertK = 50,      xlim=c(-1,0),   ylim=c(0,1),      maxVary = 5)
plot(amShifted, "stopNotTrivial",    alertK = 50,      xlim=c(-1,0),   ylim=c(0,1),      maxVary = 5)
# Explore number of steps in affirmation step
plot(amShifted, "n",                 waitWidth = 0.3,  xlim=c(-1,0),   ylim=c(0,801),    maxVary = 5)
plot(amShifted, "bias",              waitWidth = 0.3,  xlim=c(-1,0),   ylim=c(-0.1,0.1), maxVary = 5)
plot(amShifted, "mse",               waitWidth = 0.3,  xlim=c(-1,0),   ylim=c(0,0.1),    maxVary = 5)
plot(amShifted, "cover",             waitWidth = 0.3,  xlim=c(-1,0),   ylim=c(0.75,1),   maxVary = 5)
plot(amShifted, "stopInconclusive",  waitWidth = 0.3,  xlim=c(-1,0),   ylim=c(0,1),      maxVary = 5)
plot(amShifted, "stopNotImpactful",  waitWidth = 0.3,  xlim=c(-1,0),   ylim=c(0,1),      maxVary = 5)
plot(amShifted, "stopNotTrivial",    waitWidth = 0.3,  xlim=c(-1,0),   ylim=c(0,1),      maxVary = 5)
# Unrestricted Sample Size with lag of remaining outcomes
plot(amShifted, "n",                 alertK = 50,     xlim=c(-1,0),   ylim=c(0,801), maxVary = 10, sizeRestrictions = "lag")
plot(amShifted, "stopInconclusive",  alertK = 50,     xlim=c(-1,0),   ylim=c(0,1),   maxVary = 10, sizeRestrictions = "lag")
plot(amShifted, "stopInconclusive",  waitWidth = 0.3, xlim=c(-1,0),   ylim=c(0,1),   maxVary = 10, sizeRestrictions = "lag")
# Max N with immediate outcomes
plot(amShifted, "n",     alertK = 50,     xlim=c(-1,0),   ylim=c(0,801), maxVary = 10, sizeRestrictions = "maxN")
plot(amShifted, "stopInconclusive",     alertK = 50,     xlim=c(-1,0),   ylim=c(0,1), maxVary = 10, sizeRestrictions = "lag")
summary(amShifted, alertK = 50, waitTime = 0.3, treatEffect = -0.5)
summary(amShifted)
summary(am)
# Simulate AM trial
# One-sided deltas
# Outcome has sd = 2
am2 <-  sgpvAM(nreps           = 100,
               maxAlertSteps    = 100,       lookSteps = 1, waitWidths = sort(c(seq(0.2, 1.2, by = 0.2),c(0.5,0.7))),
               dataGeneration   = rnorm,   dataGenArgs = list(n=800, sd=2),
               effectGeneration = 0,
               modelFit         = lmCI,
               pointNull = 0, deltaL2 = -1, deltaL1=-0.2, deltaG1=NA, deltaG2=NA,
               monitoringIntervalLevel = 0.05,
               maxN = 200, lagOutcomeN = 50)
amShifted2 <- locationShift(am2, shiftedThetas = seq(-2,0.8,by=0.4))
# Unrestricted Sample Size
# Explore wait width (first with alert k specified at 50)
plot(amShifted2, "n",                 alertK = 0,       xlim=c(-2,1),    ylim=c(0,500))
plot(amShifted2, "n",                 alertK = 50,      xlim=c(-2,1),    ylim=c(0,500))
plot(amShifted2, "rejPN",             alertK = 50,      xlim=c(-2,1),   ylim=c(0,1))
plot(amShifted2, "bias",              alertK = 50,      xlim=c(-2,1),   ylim=c(-0.2,0.2))
plot(amShifted2, "mse",               alertK = 50,      xlim=c(-2,1),   ylim=c(0,0.3))
plot(amShifted2, "cover",             alertK = 50,      xlim=c(-2,1),   ylim=c(0.75,1))
plot(amShifted2, "stopInconclusive",  alertK = 50,      xlim=c(-2,1),   ylim=c(0,1))
plot(amShifted2, "stopNotImpactful",  alertK = 50,      xlim=c(-2,1),   ylim=c(0,1))
plot(amShifted2, "stopNotTrivial",    alertK = 50,      xlim=c(-2,1),   ylim=c(0,1))
# Explore number of steps in affirmation step
plot(amShifted2, "n",                waitWidth = 0.4,  xlim=c(-2,1),   ylim=c(0,500),    maxVary = 5)
plot(amShifted2, "bias",             waitWidth = 0.4,  xlim=c(-2,1),   ylim=c(-0.1,0.1), maxVary = 5)
plot(amShifted2, "mse",              waitWidth = 0.4,  xlim=c(-2,1),   ylim=c(0,0.3),    maxVary = 5)
plot(amShifted2, "cover",            waitWidth = 0.4,  xlim=c(-2,1),   ylim=c(0.75,1),   maxVary = 5)
plot(amShifted2, "stopInconclusive", waitWidth = 0.4,  xlim=c(-2,1),   ylim=c(0,1),      maxVary = 5)
plot(amShifted2, "stopNotImpactful", waitWidth = 0.4,  xlim=c(-2,1),   ylim=c(0,1),      maxVary = 5)
plot(amShifted2, "stopNotTrivial",   waitWidth = 0.4,  xlim=c(-2,1),   ylim=c(0,1),      maxVary = 5)
# Unrestricted Sample Size with lag of remaining outcomes
plot(amShifted2, "stopInconclusive",  alertK = 50,     xlim=c(-2,1),   ylim=c(0,1),   maxVary = 10, sizeRestrictions = "lag")
plot(amShifted2, "stopInconclusive",  waitWidth = 0.4, xlim=c(-2,1),   ylim=c(0,1),   maxVary = 10, sizeRestrictions = "lag")
plot(amShifted2, "stopInconclusive",  waitWidth = 0.6, xlim=c(-2,1),   ylim=c(0,1),   maxVary = 10, sizeRestrictions = "lag")
# Max N with immediate outcomes
plot(amShifted2, "n",                    alertK = 50, xlim=c(-2,1),   ylim=c(0,500), maxVary = 10, sizeRestrictions = "maxN")
plot(amShifted2, "stopInconclusive",     alertK = 50, xlim=c(-2,1),   ylim=c(0,1),   maxVary = 10, sizeRestrictions = "lag")
summary(amShifted2, alertK = 50, waitTime = 0.6, treatEffect = -0.4)
summary(amShifted2)
summary(am2)
# Explore ECDF of Bias and Sample Size
ooo <- ecdf.sgpvAM(am = amShifted2, stat = "Bias",alertK = 50,treatEffect = 0,xlim = c(-1,2))
ooo <- ecdf.sgpvAM(am = amShifted2, stat = "Bias",waitWidth = 0.4,alertK = 50,treatEffect = 0,xlim = c(-1,2))
ooo <- ecdf.sgpvAM(am = amShifted2, stat = "Size",alertK = 50,treatEffect = 0,xlim = c(0,400))
# Explore quantiles of sample size for fully specified study design
# See probability of stopping by certain sample size under fully specified design
ooo <- ecdf.sgpvAM(am = amShifted2, stat = "Size",waitWidth = 0.4,alertK = 50,treatEffect = 0,xlim = c(0,400))
quantile(ooo, probs=c(0,0.05,0.1,0.2,0.5,0.8,0.9,0.95,1))
ooo(200)

}
